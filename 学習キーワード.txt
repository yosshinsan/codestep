reset.css

ファビコン
<head>タブ内に定義
<link rel="icon" href="./img/favicon.ico">

タイトル
head内に記載
<title>サイトタイトル</title>
ページ開いた時のタブに表示されるテキスト

サイトの横幅
　.containerとかその中の幅を決めるタグにmax-widthを指定してやるのが良さそう
  .containerの中にhearder、main、footerを含めてしまえばよい。

サイトトップ見出し
良くサイトの上部にロゴマークを入れているがここをh1タグで囲ってサイトトップみだしにする
<h1>
	<img src="---" alt="サイトのトップ見出し">
<h1>
こんな感じ

フォントサイズの指定
htmlタブ要素にfont-size 100%としておく。
これにより、ユーザーがブラウザで指定したフォントサイズが正しく反映される
文字サイズの指定場合はremを使った方がよい。
remはTOP階層のフォントサイズの比率でキメラ得るので、
1.2remとすれば、ユーザーがブラウザで指定したフォントサイズの1.2倍といった形で表示できる。
px指定するよりもこっちの方が良いらしい。


画像の高さ
画面一杯まで高さを取りたい場合、height: 100vhでとれる
画面一杯よりも少しマイナスさせたい場合 height: calc(100vh -60px) みたいな書き方ができる

flex-direction フレックスボックスの中の要素の並び方を指定できたはず
通常は　row ⇒　横並び
たとえば　colmuにすると立て並びになるので、モバイルビューの場合にわざわざflexをblockに戻すのではなく、
このプロパティで対応できそう。
row column　以外にも指定できる。参考書にもあったはずだがどこに書いてあったかわからない。
flex-directionをcolumnにして要素を縦並びにして、
justify-contentsでspace-betweenにすると縦方向に均等配置できる。
※justify-contentsは横並びの時専用ではないらしい。
うまくいかないときはflec-directionの高さがどうなっているか確認してみてもよいかも。


max-width
meta name="description" ページの概要を記入するmeta情報

wrapperクラス
headertとかsectionとか同じ横幅を指定したいときにこのクラスを与えて、cssで幅を指定するのが慣例かも。


inline-blockの使いどころ
inline-blockは要素の中身によってい幅と高さが自動できまる
余白の指定はblock要素と同じなので、
要素の中身によって幅と高さを自動できめて、margin、paddingを指定したい場合に有効化かも。
うーん、横中央表示であればinline-blockした要素の親要素にtext-align center でもいけるな。

imgタブ
imgはインライン要素のはずなのにheight指定ができるなぜかわからない

objject-fit
画像に高さを指定するとアスペクト比が崩れて画像がゆがむので、
object-fitプロパティを使って画像の表示方法を指定する　たとえばcover
画像の表示位置はobject-positionプロパティで指定できる

justify-contents フレックスボックスの子要素の横方向の配置方法を決められる


align-self フレックスボックスの子要素の位置を決められる

flex-basis フレックスボックスの子要素の大きさを決められる
flex-basisでimgタグの幅を指定しても、効かない場合がある。
max-widthにflex-basisと同じ値を設定すると効くようになる。
※ブラウザのバグらしい。


定義リスト 項目名と内容をセットで説明するリスト

<dl>
 <dt>要素</dt>
 <dd>説明</dd>
 <dt>要素1</dt>
 <dd>説明1</dd>
</dl>

/*
「display: table;」と「margin: 0 auto;」で中央に配置。
※この方法を使うとテキストの長さに応じて可変で中央配置できる
*/
display:tableを使うと中身の長さによって幅が決まるようになる。
olタグにdisplay:tableを指定してあげるとli要素の中の文字数によってolタブの幅が決まる。
左右中央寄せにする場合等に便利。


疑似クラス　liとかの最後の要素にcssで装飾したい場合
li : last-childで定義できる
最後の要素以外　li:not(:last-child)

htmlの構造が正しいか判定してくれるサイトがある
おすすめサイト集参照。

line-height
行間を指定する
line-heightは文字の高さと余白の部分を足した高さ
1.5を指定した場合、フォントサイズの1.5倍となる
フォントサイズが30pxの場合45pxとなり、上下に余白が7.5pxずつできる
おすすめは1.5〜1.8
letter-spacing
文字の間隔をしていする

単位はemがおすすめ
1em = 文字の高さなので、文字の高さに対する比率でしていできる
オススメは0.04〜0.12em

CSSのcalc()関数
関数を使うとwidthの値に計算結果を設定できる。
ex:witdh: calc(100%/3) ⇒ 幅 100%の3分の1

block要素を中身の長さによって幅を決めたい場合
witdh: fit-content　が使えるっぽい
display:table を使う場合との違いがよくわかっていなし。

text-align:centerは子要素にも敬称される

<div>
	<p>あいうえお</p>
</div

のような構成になっているときdivにtext-align:centerを指定すると
pタグのなかのインライン要素(あいうえお)が中央寄せとなる

header main fotterについて
headerがなければむりやりheaderタグを設ける必要はない



